
* Functional programming in Haskell
** Week 1

*** succesor

succ 0 = 1
succ 1 = 2

#+BEGIN_SRC haskell
plusTwo n = succ (succ n)
plusThree n = succ (plusTwo n)
#+END_SRC

applyTwice f n = f (f n)

*** How do we define plus?

plus n m means apply succ to n, m times

#+BEGIN_SRC haskell
plus n 1 = succ n
plus n 2 = succ (plus n 1) = succ (succ n)
#+END_SRC

plus n i = succ(succ(...(succ n)...)

plus n 0 = n, for every n
plus n 1 = succ n = succ (plus n 0)
plus n (succ m) is succ (plus n m)

plus 7 3
= plus 7 (succ 2)
= succ (plus 7 2)
= succ (plus 7 (succ 1))
= succ (succ (plus 7 1))
= succ (succ (plus 7 (succ 0)))
= succ (succ (succ (plus 7 0)))
= succ (succ (succ 7))
= succ (succ 8)
= succ 9
= 10

succ takes a whole number as input and produces
a whole nuber as output

*** Plus and mult take two whole numbers as input 

and produce a whole number as output

mult is repeated addition

mult n m means apply plus n, m times
mult n 0 = 0 for every n
mult n (succ m) = plus n (mult n m)

there is no succesor to a fractional number!
so function plus that adds two fractionals will be
different than plus that adds two whole numbers

in in Mathematich we write f: D -> C for a function
with domain D and codomain C

*** Collections

a *list* of integers
a *sequence* of characters - words or strings
*pairs* of numbers

such collections are also types of values

*** Squaring

#+BEGIN_SRC haskell
square :: Int -> Int
square x = x * x
#+END_SRC

*** Inclusive *xor* is a || b

checks is a is True and b is True, both are True

*** (example) xor (exclusive or)

input two values of type Bool
check that exactly one of them is True

xor :: Bool -> Bool -> Bool  -- input 1, input 2, output

xor b1 b2 = (b1 and (not b2)) ||
            ((not b1) and b2)

-- multiple definitions, by cases

x :: Bool -> Bool -> Bool
xor True False = True
xor False True = True
xor b1    b2   = False

-- so I want either b1 to be true and b2 to be not true
-- or I want b1 to be not true and b2 to be true
-- T F || F T

*** Pattern matching
*** xor 

Xor True True does not match with xor True False = True

When does a function call match a definition?
if the argument in the definition is a constant, the value
supplied in the function call must be the same constant

If the argument in the definition is a variable, any value
supplied in the function call matches, and is substituted
for the variable (the "usual" case)

f(n) = n + 3
f(7)

7 matches with n

-}

*** OR

#+BEGIN_SRC haskell
or :: Bool -> Bool -> Bool
or True b    = True
or b    True = True
or b1   b2   = False                                   
#+END_SRC

#+BEGIN_SRC haskell
or :: Bool -> Bool -> Bool
or True _    = True
or _    True = True
or _    _    = False
#+END_SRC

{- OR truth table

| b1 | b2 | Out |
| T  | F  | T   |
| F  | T  | T   |
| b1 | b2 | F   |

*** Inorder

input three values of type Int
Check that the numbers are in order


#+BEGIN_SRC haskell
inorder :: Int -> Int -> Int -> Int
inorder x y z = (x <= y) and (y <= z)
#+END_SRC

*** AND

#+BEGIN_SRC haskell
and :: Bool -> Bool -> Bool
and True b  = b
and False b = False
#+END_SRC

#+BEGIN_SRC haskell
and :: Bool -> Bool -> Bool
and True b  = b
and False _ = False

#+END_SRC


**AND**

| b1 | b2 | Out |
| T  | F  | F   |
| T  | T  | T   |
| F  | T  | F   |
| F  | F  | F   |

Look at the TF -> F and TT -> T. The output is the same
as the second argument. So we capture that with

*and True b = b* meaning if the first argument is True
look at the second argument and return it as the output.
So this one rule captures two rules!
Lastly, FT and FF both have the same first argument and
no matter what the second argument is return F.
We capture that with *and False b = False*

Note: 

When you begin True and recieve True you stay True
When you begin True and recieve False you stay False
When you begin False and recieve True you stay False
When you begin False and recieve False you stay False
When you are not True you are False
When you are not False you are True

When you are empty and embrace emptiness you stay empty
When you are empty and embrace any color you stay that color
When you are any color and recieve emptiness you stay that color
When you are any color and recieve any color you stay any color

x and y = x*y = min(x,y)
x or y  = x + y - x*y = max(x,y)
not x   = 1 - x


Instead of elementary algebra where the values of the
variables are numbers, and the prime operations are
addition and multiplication, the main operations of
Boolean algebra are the conjuction (and) denoted as &&,
the disjunction (or) denoted as ||, and the negation (not)
denoted as not. 

**** De Morgans Laws

Search A: NOT (cars OR trucks)
Search B: (NOT cars) AND (NOT trucks)

World is nirvana
World is samsara
World contains nirvana and samsara
world contains neither nirvana nor nirvana

World is black 
World is white
World contains black and white
World contains neither black nor white

**** negation of disjunction

"It is false that either of A or B is true",

not (A or B)

In that it has been established that neither A nor B is true,
then it must follow that both A is not True *and* B is not true

not (A or B) = (not A) and (not B)

"since two things are both false, it is also false that
either of them is true"

**** negation of conjuction

"since it is false that two things are both true, at least 
one of them must be false"

not (A and B) = (not A) or (not B)

*** Recursive definitions

https://en.wikipedia.org/wiki/Recurrence_relation

A *recurrence relation* is an equation that expresses each
element of a sequence as a function of the preceding ones.

Single-variable of one-dimensional recurrence relations are
about sequences (i.e. functions defined on one-dimensional
grids). Multi-variable or n-dimensional recurrence relations
are about n-dimensional grids. Functions defined on n-grids
can also be studied with partial difference equations.

Base case: f(0)

Inductive step: f(n) defined in terms of smaller values,
f(n-1), f(n-2), ..., f(0)

Example: Factorial

0! = 1
n! = n * (n - 1)!

#+BEGIN_SRC haskell
factorial :: Int -> Int
factorial 0 = 1
factorial n = n * (factorial (n - 1))
#+END_SRC

*** Conditional definitions

Use conditional expressions to selectively enable a definition
Each part is **guarded** by conditional expression
Test **guards** top to bottom
Note the indentation
Note different forms:
1. pattern matching for factorial 0
2. conditional definition for factorial n
Guards may overlap and not cover all cases too!
Notice no match for factorial 1
#+BEGIN_SRC haskell
factorial 0 = 1
factorial n
  | n == 0 = 1
  | n < 0 = factorial (-n)
  | n > 1 = n * (factorial (n - 1))
#+END_SRC

#+BEGIN_SRC haskell
factorial :: Int -> Int
factorial n
  | n == 0 = 1
  | n > 0  = n * (factorial (n - 1))
  | otherwise = factorial (-n)
#+END_SRC

*** Currying

**** WIKI: Currying is the technique of translating the evaluation of a
function that takes multiple arguments into evaluating a sequence
of functions, each with a single argument. For example, a function
that takes two arguments, one from X and one from Y, and produces
outputs in Z, by currying is translated into a function that 
takes a single argument from X and produces as outputs functions
from Y to Z. Currying is related to, but not the same as,
partial application which refers to the process of fixing a 
number of arguments to a function, producing another function
of smaller arity.

Given a function f: (X * Y) -> Z **currying** constructs a new
function h: X -> (Y -> Z) that is, h takes an argument from X
and returns a function that maps Y to Z. It is defined by
h(x)(y) = f(x,y)


**** functions with multiple inputs

Recall that we writee plus n m, not plus(n,m). The arity is 2.
So plus would be a binary function taking two arguments.
Instead, assume all functions take only one input!

                            n --->
      plus(n,m) = n + m           PLUS ---> n+m
                            m ---> 



      plus n m = n + m      n ---> PLUS --->
                                            PLUS n ---> n + m
                                     m  --->

Type of plus: input Int, output Int, so Int -> Int
so Int -> (Int -> Int)

so plus3 : Int -> (Int -> (Int -> Int))

(((plus3 n)m)p) = n + m + p

*** Examples: 
**** GCD

Euclid's algorith for gcd(a,b), assume a >= b
If b is 0, define the answer to be a
Otherwise, gcd(a,b) = gcd(b, mod a b)  which means
keep replacing the gcd of (a,b) by the gcd of the smaller number
and the remainder of the larger number divided by the smaller
number

if we have gcd (18,12), 
replace this by the gcd of the smaller number 12, 
if I divide 18 / 12 I get 6 as a remainder 
because its one(12) with the remainder 6,
then I will get gcd of 6, 
and the remainder of 12 divided by 6 is 0
and then this would be the base case, so gcd would be 6

gcd (18,12) = gcd (12,6) = gcd (6,0) => 6

#+BEGIN_SRC haskell
gcd :: Int -> Int -> Int
gcd a 0 = a
gcd a b
  | a >= b    = gcd b (mod a b)
  | otherwise = gcd b a
#+END_SRC

**** Largest divisor

Find the largest divisor of n, other than n itself

Strategy: try n-1, n-2, ... in the worst case, we stop at 1

#+BEGIN_SRC haskell
largestdiv :: Int -> Int
largestdiv n = divsearch n (n - 1)

divsearch :: Int -> Int -> Int
divsearch m i
  | (mod m i) == 0 = i
  | otherwise      = divsearch m (i - 1)
#+END_SRC

**** Integer Logarithm

Log(k) n = y

k^y = n

If we divide n by k y times, we reach 1

Integer logarithm: intlog(k) n = j

Dividing *n* by *k j* times gives a number >= 1
Dividing *n* by *k j+1* times takes us below 1

intlog(2) 60 = 5 because 60/2^5 > 1, 60/2^6 < 1

60 -> 30 -> 15 -> 7 -> 3 -> 1

#+BEGIN_SRC haskell

-- we read intlog of the base(k) of n

--        base   number
intLog :: Int -> Int -> Int
intlog k 1 = 0  --if the base is 1, log is 0
intlog k n
  | n >= k    = 1 + intlog k (div n k)
  | otherwise = 0
#+END_SRC
**** Reverse digits

intreverse 13276 should yield 67231

Strategy:
 
Split *13276* as *1237* and *6* using *div* and *mod*

12376 div 10 -> 1327
      mod       6

Recursively reverse 1327 to get 7231

Multiply 6 by suitable power of 10 and add:

60 000 + 7231 = 67231

Use intlog to determine the power of 10

#+BEGIN_SRC haskell
Intreverse :: Int -> Int
Intreverse n
  | n < 10    = n
  | otherwise = (intreverse (div n 10) +
                (mod n 10)*
                   (power 10 (intlog 10 n))

power :: Int -> Int -> Int
power m 0 = 1
power m n = m * (power m (n-1))
#+END_SRC

Note:

Plus is repeated Succesor
Mult is repeated Plus
Power is repeated Mult
** Week 2
